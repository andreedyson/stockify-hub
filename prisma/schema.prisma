generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(cuid())
  fullname  String
  email     String   @unique
  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventories InventoryMember[]
  Activity    Activity[]
}

model Inventory {
  id        String   @id @default(uuid())
  name      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      InventoryMember[]
  products   Product[]
  categories Category[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  inventoryId String
  categoryId  String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Inventory   Inventory     @relation(fields: [inventoryId], references: [id], onDelete: Restrict)
  Category    Category      @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  Transaction Transaction[]
}

model Transaction {
  id         Int      @id @default(autoincrement())
  productId  String
  quantity   Int
  totalPrice Float
  status     Status
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model Category {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inventoryId String

  products  Product[]
  Inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Restrict)
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model InventoryMember {
  id          String   @id @default(cuid())
  userId      String
  inventoryId String
  role        userRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Restrict)
}

enum userRole {
  OWNER
  ADMIN
  USER
}

model Activity {
  id         String     @id @default(cuid())
  userId     String
  action     Action
  targetId   String
  targetType TargetType
  createdAt  DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)
}

enum Action {
  CREATE
  UPDATE
  DELETE
}

enum TargetType {
  INVENTORY
  INVENTORY_MEMBER
  PRODUCT
}
